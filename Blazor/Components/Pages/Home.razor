@page "/"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using System.Text.Json
@using Data.Models
@inject NavigationManager Navigation

 <head>
    <link rel="stylesheet" href="./HomeStyle.css">
    <link rel="stylesheet" href="./AnimalModalStyle.css">
</head>
<body style="margin: 0; padding: 0; overflow: hidden;">
    <header style="position: fixed; top: 0; width: 100%; background: #fff; z-index: 999;">
        <nav id='pn_menu'>
            <div class="logo">
                <a href="/">
                    <h2>HOME</h2>
                </a>
            </div>
            <div id="head-mobile"></div>
            <div class="button"></div>
            <ul class="main_menu">
                <li class='active'><a href='/Categories'>Forum</a></li>
                <li>
                    <a href='/AllAnimals'>All Animals</a>
                   
                </li>
                <li><a href='/UserEdit'>My Account</a></li>
            </ul>
        </nav>
    </header>
    <div id="map-container" style="margin-top: 50px; height: calc(100vh - 50px); width: 100vw;">
        <div id="map" style="height: 100%; width: 100%;"></div>
    </div>
    <div class="modal" style="display: @modalDisplay">
        <div class="modal-content">
            <span class="close" @onclick="CloseModal">&times;</span>
            <h3>Create a New Animal</h3>
            <form>
                <div class="form-group">
                    <label for="animalBreed">Breed:</label>
                    <input type="text" id="animalBreed" class="form-control" @bind="@newAnimal.animal_breed" />
                </div>

                <div class="form-group">
                    <label for="animalDescription">Description:</label>
                    <textarea id="animalDescription" class="form-control" @bind="@newAnimal.animal_description"></textarea>
                </div>

                <div class="form-group">
                    <label for="animalType">Type:</label>
                    <input type="text" id="animalType" class="form-control" @bind="@newAnimal.animal_type" />
                </div>

                <div class="form-group">
                    <label for="animalPicture">Picture:</label>
                    <InputFile id="user_picture" OnChange="HandleFileChange" />
                </div>
                <label for="animalStatus">Status:</label>
                <select id="animalStatus" class="form-control" @bind="@newAnimal.animal_status">
                    <option selected disabled>Pick a status...</option>
                    <option value="Lost">Lost</option>
                    <option value="AvailableForAdoption">Available for Adoption</option>
                </select>
                @if (newAnimal.animal_picture != null && newAnimal.animal_picture.Length > 0)
                {
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(newAnimal.animal_picture)}")" alt="Animal Image" class="img-preview" />
                }

                <button type="button" class="btn btn-primary" @onclick="CreateAnimal">Create Animal</button>
            </form>
        </div>
    </div>
</body>


@code {
    List<Animal> animals;
    ApiServices e = new ApiServices();
    Animal clickedAnimal;
    private User storedUser;
    private string modalDisplay = "none";
    private Animal newAnimal = new Animal();
    private string imageData;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        animals = await e.GetListAnimalsAsync();
        if (firstRender)
        {
            var userJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "user");
            if (userJson == null)
            {
                Navigation.NavigateTo("/Login");
                return;
            }
            storedUser = JsonSerializer.Deserialize<User>(userJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            await JSRuntime.InvokeVoidAsync("initializeMap", animals, DotNetObjectReference.Create(this));
            StateHasChanged();
        }
    }

    public void OpenModal()
    {
        modalDisplay = "block";
    }

    private void CloseModal()
    {
        modalDisplay = "none";
    }
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var imageFile = e.File;

            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                imageData = Convert.ToBase64String(memoryStream.ToArray());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling file change: {ex.Message}");
        }
    }
    [JSInvokable]
    public async Task HandleMapClick(double latitude, double longitude)
    {
        newAnimal.animal_latitude = latitude;
        newAnimal.animal_longtitude = longitude;
        OpenModal();
        StateHasChanged();
    }

    private async Task CreateAnimal()
    {
        newAnimal.animal_date = DateTime.Now;
        newAnimal.user_id = storedUser.user_id;
        if (imageData != null)
        {
            newAnimal.animal_picture = Convert.FromBase64String(imageData);
        }

        await e.CreateAnimal(newAnimal);
        CloseModal();
        animals = await e.GetListAnimalsAsync();
        await JSRuntime.InvokeVoidAsync("initializeMap", animals, DotNetObjectReference.Create(this));
        StateHasChanged();
    }
    
}